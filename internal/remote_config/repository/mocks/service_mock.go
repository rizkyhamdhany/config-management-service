// Code generated by MockGen. DO NOT EDIT.
// Source: internal/remote_config/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "configuration-management-service/internal/remote_config/model"
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIService is a mock of IService interface.
type MockIService struct {
	ctrl     *gomock.Controller
	recorder *MockIServiceMockRecorder
}

// MockIServiceMockRecorder is the mock recorder for MockIService.
type MockIServiceMockRecorder struct {
	mock *MockIService
}

// NewMockIService creates a new mock instance.
func NewMockIService(ctrl *gomock.Controller) *MockIService {
	mock := &MockIService{ctrl: ctrl}
	mock.recorder = &MockIServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIService) EXPECT() *MockIServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIService) Create(ctx context.Context, schemaType, name string, data json.RawMessage) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, schemaType, name, data)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIServiceMockRecorder) Create(ctx, schemaType, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIService)(nil).Create), ctx, schemaType, name, data)
}

// Get mocks base method.
func (m *MockIService) Get(ctx context.Context, name string, version *int) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, name, version)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockIServiceMockRecorder) Get(ctx, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIService)(nil).Get), ctx, name, version)
}

// ListVersions mocks base method.
func (m *MockIService) ListVersions(ctx context.Context, name string) ([]model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVersions", ctx, name)
	ret0, _ := ret[0].([]model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVersions indicates an expected call of ListVersions.
func (mr *MockIServiceMockRecorder) ListVersions(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVersions", reflect.TypeOf((*MockIService)(nil).ListVersions), ctx, name)
}

// Rollback mocks base method.
func (m *MockIService) Rollback(ctx context.Context, name string, version int) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", ctx, name, version)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Rollback indicates an expected call of Rollback.
func (mr *MockIServiceMockRecorder) Rollback(ctx, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockIService)(nil).Rollback), ctx, name, version)
}

// Update mocks base method.
func (m *MockIService) Update(ctx context.Context, name string, data json.RawMessage) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, name, data)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIServiceMockRecorder) Update(ctx, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIService)(nil).Update), ctx, name, data)
}
