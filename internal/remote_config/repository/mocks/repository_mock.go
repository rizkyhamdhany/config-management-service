// Code generated by MockGen. DO NOT EDIT.
// Source: internal/remote_config/repository/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "configuration-management-service/internal/remote_config/model"
	context "context"
	json "encoding/json"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIRepo is a mock of IRepo interface.
type MockIRepo struct {
	ctrl     *gomock.Controller
	recorder *MockIRepoMockRecorder
}

// MockIRepoMockRecorder is the mock recorder for MockIRepo.
type MockIRepoMockRecorder struct {
	mock *MockIRepo
}

// NewMockIRepo creates a new mock instance.
func NewMockIRepo(ctrl *gomock.Controller) *MockIRepo {
	mock := &MockIRepo{ctrl: ctrl}
	mock.recorder = &MockIRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRepo) EXPECT() *MockIRepoMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockIRepo) Append(ctx context.Context, name string, data json.RawMessage) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, name, data)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Append indicates an expected call of Append.
func (mr *MockIRepoMockRecorder) Append(ctx, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockIRepo)(nil).Append), ctx, name, data)
}

// ByVersion mocks base method.
func (m *MockIRepo) ByVersion(ctx context.Context, name string, version int) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ByVersion", ctx, name, version)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ByVersion indicates an expected call of ByVersion.
func (mr *MockIRepoMockRecorder) ByVersion(ctx, name, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ByVersion", reflect.TypeOf((*MockIRepo)(nil).ByVersion), ctx, name, version)
}

// Create mocks base method.
func (m *MockIRepo) Create(ctx context.Context, schemaType, name string, data json.RawMessage) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, schemaType, name, data)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIRepoMockRecorder) Create(ctx, schemaType, name, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIRepo)(nil).Create), ctx, schemaType, name, data)
}

// Latest mocks base method.
func (m *MockIRepo) Latest(ctx context.Context, name string) (model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Latest", ctx, name)
	ret0, _ := ret[0].(model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Latest indicates an expected call of Latest.
func (mr *MockIRepoMockRecorder) Latest(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Latest", reflect.TypeOf((*MockIRepo)(nil).Latest), ctx, name)
}

// List mocks base method.
func (m *MockIRepo) List(ctx context.Context, name string) ([]model.RemoteConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, name)
	ret0, _ := ret[0].([]model.RemoteConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockIRepoMockRecorder) List(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockIRepo)(nil).List), ctx, name)
}

// MockrowScanner is a mock of rowScanner interface.
type MockrowScanner struct {
	ctrl     *gomock.Controller
	recorder *MockrowScannerMockRecorder
}

// MockrowScannerMockRecorder is the mock recorder for MockrowScanner.
type MockrowScannerMockRecorder struct {
	mock *MockrowScanner
}

// NewMockrowScanner creates a new mock instance.
func NewMockrowScanner(ctrl *gomock.Controller) *MockrowScanner {
	mock := &MockrowScanner{ctrl: ctrl}
	mock.recorder = &MockrowScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrowScanner) EXPECT() *MockrowScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockrowScanner) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockrowScannerMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockrowScanner)(nil).Scan), dest...)
}
